
#nullable enable
#pragma warning disable CS0612,CS0618

namespace TestEffect.Classes
{
    partial class BaseEquality
    {
        partial class Person : global::System.IEquatable<Person>
        {
            /// <summary>
            /// Indicates whether the object on the left is equal to the object on the right.
            /// </summary>
            /// <param name="left">The left object</param>
            /// <param name="right">The right object</param>
            /// <returns>true if the objects are equal; otherwise, false.</returns>
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Brimborium.BaseMethods", "1.0.0.0")]
            public static bool operator ==(global::TestEffect.Classes.BaseEquality.Person? left, global::TestEffect.Classes.BaseEquality.Person? right)
                 => global::Brimborium.BaseMethods.DefaultEqualityComparer<global::TestEffect.Classes.BaseEquality.Person>.GetDefault().Equals(left, right);
            
            /// <summary>
            /// Indicates whether the object on the left is not equal to the object on the right.
            /// </summary>
            /// <param name="left">The left object</param>
            /// <param name="right">The right object</param>
            /// <returns>true if the objects are not equal; otherwise, false.</returns>
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Brimborium.BaseMethods", "1.0.0.0")]
            public static bool operator !=(global::TestEffect.Classes.BaseEquality.Person? left, global::TestEffect.Classes.BaseEquality.Person? right)
                 => !global::Brimborium.BaseMethods.DefaultEqualityComparer<global::TestEffect.Classes.BaseEquality.Person>.GetDefault().Equals(left, right);
            
            /// <inheritdoc/>
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Brimborium.BaseMethods", "1.0.0.0")]
            public override bool Equals(object? obj) =>
                Equals(obj as global::TestEffect.Classes.BaseEquality.Person);
            
            /// <inheritdoc/>
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Brimborium.BaseMethods", "1.0.0.0")]
            public bool Equals(global::TestEffect.Classes.BaseEquality.Person? other)
            {
                return
                    !ReferenceEquals(other, null) && this.GetType() == other.GetType()
                    && global::Brimborium.BaseMethods.DefaultEqualityComparer<global::System.Int32>.GetDefault().Equals(Age!, other.Age!)
                    ;
            }
            
            /// <inheritdoc/>
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Brimborium.BaseMethods", "1.0.0.0")]
            public override int GetHashCode()
            {
                var hashCode = new global::System.HashCode();
                
                hashCode.Add(this.GetType());
                hashCode.Add(
                    this.Age!,
                    global::Brimborium.BaseMethods.DefaultEqualityComparer<global::System.Int32>.GetDefault());
                
                return hashCode.ToHashCode();
            }
        }
    }
}

#nullable enable
#pragma warning disable CS0612,CS0618

namespace TestEffect.Classes
{
    partial class BaseEquality
    {
        partial class Manager : global::System.IEquatable<Manager>
        {
            /// <summary>
            /// Indicates whether the object on the left is equal to the object on the right.
            /// </summary>
            /// <param name="left">The left object</param>
            /// <param name="right">The right object</param>
            /// <returns>true if the objects are equal; otherwise, false.</returns>
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Brimborium.BaseMethods", "1.0.0.0")]
            public static bool operator ==(global::TestEffect.Classes.BaseEquality.Manager? left, global::TestEffect.Classes.BaseEquality.Manager? right)
                 => global::Brimborium.BaseMethods.DefaultEqualityComparer<global::TestEffect.Classes.BaseEquality.Manager>.GetDefault().Equals(left, right);
            
            /// <summary>
            /// Indicates whether the object on the left is not equal to the object on the right.
            /// </summary>
            /// <param name="left">The left object</param>
            /// <param name="right">The right object</param>
            /// <returns>true if the objects are not equal; otherwise, false.</returns>
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Brimborium.BaseMethods", "1.0.0.0")]
            public static bool operator !=(global::TestEffect.Classes.BaseEquality.Manager? left, global::TestEffect.Classes.BaseEquality.Manager? right)
                 => !global::Brimborium.BaseMethods.DefaultEqualityComparer<global::TestEffect.Classes.BaseEquality.Manager>.GetDefault().Equals(left, right);
            
            /// <inheritdoc/>
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Brimborium.BaseMethods", "1.0.0.0")]
            public override bool Equals(object? obj) =>
                Equals(obj as global::TestEffect.Classes.BaseEquality.Manager);
            
            /// <inheritdoc/>
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Brimborium.BaseMethods", "1.0.0.0")]
            public bool Equals(global::TestEffect.Classes.BaseEquality.Manager? other)
            {
                return
                    base.Equals(other as global::TestEffect.Classes.BaseEquality.Person)
                    && global::Brimborium.BaseMethods.DefaultEqualityComparer<global::System.String>.GetDefault().Equals(Department!, other.Department!)
                    ;
            }
            
            /// <inheritdoc/>
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Brimborium.BaseMethods", "1.0.0.0")]
            public override int GetHashCode()
            {
                var hashCode = new global::System.HashCode();
                
                hashCode.Add(base.GetHashCode());
                hashCode.Add(
                    this.Department!,
                    global::Brimborium.BaseMethods.DefaultEqualityComparer<global::System.String>.GetDefault());
                
                return hashCode.ToHashCode();
            }
        }
    }
}
