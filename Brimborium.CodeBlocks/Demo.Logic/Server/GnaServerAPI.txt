using Brimborium.CodeFlow.RequestHandler;
using Brimborium.CodeFlow.Server;
using Brimborium.Registrator;

using Demo.API;
using Demo.Logic;

using Microsoft.Extensions.DependencyInjection;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace Demo.Server {
    [Brimborium.Registrator.Scoped]
    public class GnaServerAPI
         : Demo.Server.IGnaServerAPI {
        private  System.IServiceProvider _RequestServices;
        
        public  GnaServerAPI(
            System.IServiceProvider requestServices) {
        }
        
        
        public async Task<RequestResult<Demo.Server.GnaServerGetResponse>> GetAsync(Demo.Server.GnaServerGetRequest request, CancellationToken cancellationToken) {
            IGlobalRequestHandlerFactory globalRequestHandlerFactory = this._RequestServices.GetRequiredService<IGlobalRequestHandlerFactory>();
             requestHandler = globalRequestHandlerFactory.CreateRequestHandler<>(this._RequestServices);
            request.Deconstruct(out var Pattern, out var User);
            Demo.Server.GnaServerGetRequest logicRequest = new GnaQueryRequest(Pattern ?? string.Empty, User);
            RequestResult<Demo.Server.GnaServerGetResponse> logicResponse = await requestHandler.ExecuteAsync(logicRequest, cancellationToken);
            IServerRequestResultConverter serverRequestResultConverter = this._RequestServices.GetRequiredService<IServerRequestResultConverter>();
            return serverRequestResultConverter.ConvertToServerResultOfT<Demo.Server.GnaServerGetResponse, Demo.Server.GnaServerGetResponse>(logicResponse);
        }
        public async Task<RequestResult<Demo.Server.GnaServerUpsertResponse>> UpsertAsync(Demo.Server.GnaServerUpsertRequest request, CancellationToken cancellationToken) {
            IGlobalRequestHandlerFactory globalRequestHandlerFactory = this._RequestServices.GetRequiredService<IGlobalRequestHandlerFactory>();
             requestHandler = globalRequestHandlerFactory.CreateRequestHandler<>(this._RequestServices);
            request.Deconstruct(out var Pattern, out var User);
            Demo.Server.GnaServerUpsertRequest logicRequest = new GnaQueryRequest(Pattern ?? string.Empty, User);
            RequestResult<Demo.Server.GnaServerUpsertResponse> logicResponse = await requestHandler.ExecuteAsync(logicRequest, cancellationToken);
            IServerRequestResultConverter serverRequestResultConverter = this._RequestServices.GetRequiredService<IServerRequestResultConverter>();
            return serverRequestResultConverter.ConvertToServerResultOfT<Demo.Server.GnaServerUpsertResponse, Demo.Server.GnaServerUpsertResponse>(logicResponse);
        }
        
    }
}
